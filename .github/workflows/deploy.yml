name: Deploy Node.js App to EC2

on:
  push:
    branches:
      - Production

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

jobs:
  backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install backend dependencies
        run: npm install
        working-directory: backend

      - name: Build backend
        run: npx tsc
        working-directory: backend

      - name: Deploy Backend to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd ~/test/db-assistant
            git pull origin Production
            cd backend
            pm2 restart db-server || pm2 start npx --name db-server -- ts-node server.ts

  frontend:
    runs-on: ubuntu-latest
    needs: backend # optional: ensures backend deploys first

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: npm install
        working-directory: frontend

      - name: Build frontend
        run: npm run build
        working-directory: frontend

      - name: Deploy Frontend to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd ~/test/db-assistant
            git pull origin Production
            cd frontend
            npm install
            npm run build
            # if using Nginx or serve:
            pm2 restart frontend || pm2 start npx --name frontend -- serve -s build
